# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 10m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

issues:
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - prealloc
        - errcheck
  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  exclude-files:
    - test
    - mock

# output configuration options
output:
  formats:
    - format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

linters:
  enable:
    # report mismatches between assembly files and Go declarations
    - asmdecl
    # check for useless assignments
    - assign
    # check for common mistakes using the sync/atomic package
    - atomic
    # check for non-64-bits-aligned arguments to sync/atomic functions
    - atomicalign
    # check for common mistakes involving boolean operators
    - bools
    # check that +build tags are well-formed and correctly located
    - buildtag
    # detect some violations of the cgo pointer passing rules
    - cgocall
    # check for unkeyed composite literals
    - composites
    # check for locks erroneously passed by value
    - copylocks
    # check for calls of reflect.DeepEqual on error values
    - deepequalerrors
    # report passing non-pointer or non-error values to errors.As
    - errorsas
    # find calls to a particular function
    - findcall
    # report assembly that clobbers the frame pointer before saving it
    - framepointer
    # check for mistakes using HTTP responses
    - httpresponse
    # detect impossible interface-to-interface type assertions
    - ifaceassert
    # check references to loop variables from within nested functions
    - loopclosure
    # check cancel func returned by context.WithCancel is called
    - lostcancel
    # check for useless comparisons between functions and nil
    - nilfunc
    # check for redundant or impossible nil comparisons
    - nilness
    # check consistency of Printf format strings and arguments
    - printf
    # check for comparing reflect.Value values with == or reflect.DeepEqual
    - reflectvaluecompare
    # check for possible unintended shadowing of variables
    - shadow
    # check for shifts that equal or exceed the width of the integer
    - shift
    # check for unbuffered channel of os.Signal
    - sigchanyzer
    # check the argument type of sort.Slice
    - sortslice
    # check signature of methods of well-known interfaces
    - stdmethods
    # check for string(int) conversions
    - stringintconv
    # check that struct field tags conform to reflect.StructTag.Get
    - structtag
    # report calls to (*testing.T).Fatal from goroutines started by a test.
    - testinggoroutine
    # check for common mistaken usages of tests and examples
    - tests
    # report passing non-pointer or non-interface values to unmarshal
    - unmarshal
    # check for unreachable code
    - unreachable
    # check for invalid conversions of uintptr to unsafe.Pointer
    - unsafeptr
    # check for unused results of calls to some functions
    - unusedresult
    # checks for unused writes
    - unusedwrite
    - govet
    - revive
    - gofmt
    - errcheck
    - misspell
    - gocyclo
    - ineffassign
    - goimports
    - nakedret
    - unparam
    - unused
    - prealloc
    - durationcheck
    - nolintlint
    - staticcheck
    - makezero
    - gocritic
    - asasalint
    - nilerr
    - errorlint
    - bodyclose
  disable:
    # find structs that would use less memory if their fields were sorted
    - fieldalignment
  fast: false
linters-settings:
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    # todo(s.martynovskii): make around 10 or less
    min-complexity: 32
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.
    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: true # Report preallocation suggestions on for loops, false by default
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  revive:
    rules:
      # Blank import should be only in a main or test package, or have a comment justifying it.
      # Disabled to avoid swearing at import _ "github.com/mailru/easyjson/gen"
      # needed to generate easyjson when using a vendor folder
      - name: blank-imports
        disabled: true
      # Since GO 1.18, interface{} has an alias: any. This rule proposes to replace instances of interface{} with any.
      - name: use-any
        disabled: false
